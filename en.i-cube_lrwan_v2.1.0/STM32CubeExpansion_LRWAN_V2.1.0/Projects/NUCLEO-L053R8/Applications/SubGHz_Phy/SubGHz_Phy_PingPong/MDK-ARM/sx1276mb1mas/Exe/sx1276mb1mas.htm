<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [sx1276mb1mas\Exe\sx1276mb1mas.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image sx1276mb1mas\Exe\sx1276mb1mas.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Thu Mar 10 19:46:07 2022
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[f2]">UTIL_MEM_cpy_8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f2]">UTIL_MEM_cpy_8</a><BR>
 <LI><a href="#[10e]">UTIL_MEM_set_8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">UTIL_MEM_set_8</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from stm32l0xx_it.o(.text.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI0_1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI2_3_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI4_15_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[25]">HAL_EXTI_IRQHandler</a> from stm32l0xx_hal_exti.o(.text.HAL_EXTI_IRQHandler) referenced from stm32l0xx_it.o(.text.EXTI4_15_IRQHandler)
 <LI><a href="#[24]">HAL_GPIO_Init</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from nucleo_l053r8_bus.o(.text.BSP_SPI1_Init)
 <LI><a href="#[24]">HAL_GPIO_Init</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoInit)
 <LI><a href="#[24]">HAL_GPIO_Init</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from sys_app.o(.text.SystemApp_Init)
 <LI><a href="#[2e]">HAL_GPIO_WritePin</a> from stm32l0xx_hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoDeInit)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1f]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(.text.NMI_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[33]">OnRxDone</a> from subghz_phy_app.o(.text.OnRxDone) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[35]">OnRxError</a> from subghz_phy_app.o(.text.OnRxError) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[36]">OnRxTimeout</a> from subghz_phy_app.o(.text.OnRxTimeout) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[34]">OnTxDone</a> from subghz_phy_app.o(.text.OnTxDone) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[37]">OnTxTimeout</a> from subghz_phy_app.o(.text.OnTxTimeout) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[32]">OnledEvent</a> from subghz_phy_app.o(.text.OnledEvent) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[57]">PWR_EnterOffMode</a> from stm32_lpm_if.o(.text.PWR_EnterOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[53]">PWR_EnterSleepMode</a> from stm32_lpm_if.o(.text.PWR_EnterSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[55]">PWR_EnterStopMode</a> from stm32_lpm_if.o(.text.PWR_EnterStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[58]">PWR_ExitOffMode</a> from stm32_lpm_if.o(.text.PWR_ExitOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[54]">PWR_ExitSleepMode</a> from stm32_lpm_if.o(.text.PWR_ExitSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[56]">PWR_ExitStopMode</a> from stm32_lpm_if.o(.text.PWR_ExitStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[38]">PingPong_Process</a> from subghz_phy_app.o(.text.PingPong_Process) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1e]">RNG_LPUART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[26]">RTC_ByteToBcd2</a> from stm32l0xx_hal_rtc.o(.text.RTC_ByteToBcd2) referenced from stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime)
 <LI><a href="#[5a]">RTC_IF_BkUp_Read_Seconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Read_Seconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[5c]">RTC_IF_BkUp_Read_SubSeconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Read_SubSeconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[59]">RTC_IF_BkUp_Write_Seconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Write_Seconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[5b]">RTC_IF_BkUp_Write_SubSeconds</a> from rtc_if.o(.text.RTC_IF_BkUp_Write_SubSeconds) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[67]">RTC_IF_Convert_Tick2ms</a> from rtc_if.o(.text.RTC_IF_Convert_Tick2ms) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[66]">RTC_IF_Convert_ms2Tick</a> from rtc_if.o(.text.RTC_IF_Convert_ms2Tick) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[65]">RTC_IF_GetMinimumTimeout</a> from rtc_if.o(.text.RTC_IF_GetMinimumTimeout) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[5d]">RTC_IF_GetTime</a> from rtc_if.o(.text.RTC_IF_GetTime) referenced from rtc_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[62]">RTC_IF_GetTimerContext</a> from rtc_if.o(.text.RTC_IF_GetTimerContext) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[63]">RTC_IF_GetTimerElapsedTime</a> from rtc_if.o(.text.RTC_IF_GetTimerElapsedTime) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[64]">RTC_IF_GetTimerValue</a> from rtc_if.o(.text.RTC_IF_GetTimerValue) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[5e]">RTC_IF_Init</a> from rtc_if.o(.text.RTC_IF_Init) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[61]">RTC_IF_SetTimerContext</a> from rtc_if.o(.text.RTC_IF_SetTimerContext) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[5f]">RTC_IF_StartTimer</a> from rtc_if.o(.text.RTC_IF_StartTimer) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[60]">RTC_IF_StopTimer</a> from rtc_if.o(.text.RTC_IF_StopTimer) referenced from rtc_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32l0xx_it.o(.text.RTC_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(.text.SVC_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3e]">SX1276GetStatus</a> from sx1276.o(.text.SX1276GetStatus) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[46]">SX1276GetTimeOnAir</a> from sx1276.o(.text.SX1276GetTimeOnAir) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[52]">SX1276GetWakeupTime</a> from sx1276.o(.text.SX1276GetWakeupTime) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[3d]">SX1276Init</a> from sx1276.o(.text.SX1276Init) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[41]">SX1276IsChannelFree</a> from sx1276.o(.text.SX1276IsChannelFree) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[45]">SX1276MB1MAS_RADIO_CheckRfFrequency</a> from sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_CheckRfFrequency) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[6c]">SX1276OnDio0Irq</a> from sx1276.o(.text.SX1276OnDio0Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[6d]">SX1276OnDio1Irq</a> from sx1276.o(.text.SX1276OnDio1Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[6e]">SX1276OnDio2Irq</a> from sx1276.o(.text.SX1276OnDio2Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[6f]">SX1276OnDio3Irq</a> from sx1276.o(.text.SX1276OnDio3Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[70]">SX1276OnDio4Irq</a> from sx1276.o(.text.SX1276OnDio4Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[2c]">SX1276OnTimeoutIrq</a> from sx1276.o(.text.SX1276OnTimeoutIrq) referenced from sx1276.o(.text.SX1276Init)
 <LI><a href="#[42]">SX1276Random</a> from sx1276.o(.text.SX1276Random) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[2b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[2b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.RxChainCalibration)
 <LI><a href="#[2b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276Send)
 <LI><a href="#[2b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276SetRx)
 <LI><a href="#[2b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276SetRxConfig)
 <LI><a href="#[2b]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276.o(.text.SX1276SetTxConfig)
 <LI><a href="#[4f]">SX1276ReadBuffer</a> from sx1276.o(.text.SX1276ReadBuffer) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[4d]">SX1276ReadRssi</a> from sx1276.o(.text.SX1276ReadRssi) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[47]">SX1276Send</a> from sx1276.o(.text.SX1276Send) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[40]">SX1276SetChannel</a> from sx1276.o(.text.SX1276SetChannel) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[50]">SX1276SetMaxPayloadLength</a> from sx1276.o(.text.SX1276SetMaxPayloadLength) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[3f]">SX1276SetModem</a> from sx1276.o(.text.SX1276SetModem) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[51]">SX1276SetPublicNetwork</a> from sx1276.o(.text.SX1276SetPublicNetwork) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[4a]">SX1276SetRx</a> from sx1276.o(.text.SX1276SetRx) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[43]">SX1276SetRxConfig</a> from sx1276.o(.text.SX1276SetRxConfig) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[48]">SX1276SetSleep</a> from sx1276.o(.text.SX1276SetSleep) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[49]">SX1276SetStby</a> from sx1276.o(.text.SX1276SetStby) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[44]">SX1276SetTxConfig</a> from sx1276.o(.text.SX1276SetTxConfig) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[4c]">SX1276SetTxContinuousWave</a> from sx1276.o(.text.SX1276SetTxContinuousWave) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[4b]">SX1276StartCad</a> from sx1276.o(.text.SX1276StartCad) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[2f]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[2f]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetModem)
 <LI><a href="#[2f]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetRx)
 <LI><a href="#[2f]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetRxConfig)
 <LI><a href="#[2f]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276.o(.text.SX1276SetTxContinuousWave)
 <LI><a href="#[4e]">SX1276WriteBuffer</a> from sx1276.o(.text.SX1276WriteBuffer) referenced from sx1276.o(.rodata.Radio)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_stm32l0xx.o(.text.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[16]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[17]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[15]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3c]">TRACE_TxCpltCallback</a> from stm32_adv_trace.o(.text.TRACE_TxCpltCallback) referenced from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[39]">TimestampNow</a> from sys_app.o(.text.TimestampNow) referenced from sys_app.o(.text.SystemApp_Init)
 <LI><a href="#[27]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[28]">UART_DMAError</a> from stm32l0xx_hal_uart.o(.text.UART_DMAError) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2a]">UART_DMATransmitCplt</a> from stm32l0xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[29]">UART_DMATxHalfCplt</a> from stm32l0xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[3a]">UART_RxISR_16BIT</a> from stm32l0xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[3b]">UART_RxISR_8BIT</a> from stm32l0xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced from stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from stm32l0xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[31]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from subghz_phy_app.o(.text.SubghzApp_Init)
 <LI><a href="#[2d]">UTIL_TIMER_Create</a> from stm32_timer.o(.text.UTIL_TIMER_Create) referenced from sx1276.o(.text.SX1276Init)
 <LI><a href="#[30]">UTIL_TIMER_Stop</a> from stm32_timer.o(.text.UTIL_TIMER_Stop) referenced from sx1276.o(.text.SX1276SetStby)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[21]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[69]">vcom_DeInit</a> from usart_if.o(.text.vcom_DeInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[68]">vcom_Init</a> from usart_if.o(.text.vcom_Init) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[6a]">vcom_ReceiveInit</a> from usart_if.o(.text.vcom_ReceiveInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[6b]">vcom_Trace_DMA</a> from usart_if.o(.text.vcom_Trace_DMA) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[71]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[118]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[119]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertFreqInHzToPllStep
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_DelayMs
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Convert_ms2Tick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Convert_Tick2ms
</UL>

<P><STRONG><a name="[11d]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoDeInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[109]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[123]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[124]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[125]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>BSP_SPI1_Init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, nucleo_l053r8_bus.o(.text.BSP_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_SPI1_Init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Bus_Init
</UL>

<P><STRONG><a name="[80]"></a>BSP_SPI1_SendRecv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nucleo_l053r8_bus.o(.text.BSP_SPI1_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SendRecv
</UL>

<P><STRONG><a name="[82]"></a>DBG_ConfigForLpm</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_debug.o(.text.DBG_ConfigForLpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBG_ConfigForLpm
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Disable
</UL>

<P><STRONG><a name="[86]"></a>DBG_Disable</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sys_debug.o(.text.DBG_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DBG_Disable &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ConfigForLpm
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[fa]"></a>DBG_ProbesInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_debug.o(.text.DBG_ProbesInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.EXTI0_1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l0xx_it.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[83]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ConfigForLpm
</UL>

<P><STRONG><a name="[85]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ConfigForLpm
</UL>

<P><STRONG><a name="[84]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ConfigForLpm
</UL>

<P><STRONG><a name="[b3]"></a>HAL_DMA_Abort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_DeInit &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[87]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_DMA_Init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_DMA_Init &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[8b]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[8d]"></a>HAL_Delay</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sys_app.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_Delay &rArr; RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPong_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Reset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[ec]"></a>HAL_EXTI_GetHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_exti.o(.text.HAL_EXTI_GetHandle))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[25]"></a>HAL_EXTI_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal_exti.o(.text.HAL_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_it.o(.text.EXTI4_15_IRQHandler)
</UL>
<P><STRONG><a name="[ed]"></a>HAL_EXTI_RegisterCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_exti.o(.text.HAL_EXTI_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 208 bytes, Stack size 52 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[24]"></a>HAL_GPIO_Init</STRONG> (Thumb, 384 bytes, Stack size 52 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoDeInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Disable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Reset
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sys_app.o(.text.SystemApp_Init)
<LI> nucleo_l053r8_bus.o(.text.BSP_SPI1_Init)
<LI> sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoInit)
</UL>
<P><STRONG><a name="[eb]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_GetDio1PinState
</UL>

<P><STRONG><a name="[2e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SetAntSw
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Reset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_ChipSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoDeInit)
</UL>
<P><STRONG><a name="[8f]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_app.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[f6]"></a>HAL_IncTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[90]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_app.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_MspInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[96]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoIrqInit
</UL>

<P><STRONG><a name="[95]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[94]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[93]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[d1]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[d3]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, stm32l0xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1280 bytes, Stack size 56 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Read_SubSeconds
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Read_Seconds
</UL>

<P><STRONG><a name="[d9]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Write_SubSeconds
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_BkUp_Write_Seconds
</UL>

<P><STRONG><a name="[da]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_if.o(.text.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RTC_DeactivateAlarm &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StopTimer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RTC_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, rtc.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_SetAlarm_IT &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_SPI_Init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 656 bytes, Stack size 56 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>

<P><STRONG><a name="[116]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[af]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_MspInit</STRONG> (Thumb, 276 bytes, Stack size 96 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[c3]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart_if.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[c4]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace_DMA
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_if.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>MX_DMA_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[c6]"></a>MX_RTC_Init</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>

<P><STRONG><a name="[7f]"></a>MX_SPI1_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nucleo_l053r8_bus.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[c8]"></a>MX_SubGHz_Phy_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_subghz_phy.o(.text.MX_SubGHz_Phy_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MX_SubGHz_Phy_Init &rArr; SystemApp_Init &rArr; SX1276MB1MAS_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>MX_SubGHz_Phy_Process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_subghz_phy.o(.text.MX_SubGHz_Phy_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_SubGHz_Phy_Process &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PWR_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_EnterOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[53]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWR_EnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[55]"></a>PWR_EnterStopMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PWR_EnterStopMode &rArr; SX1276MB1MAS_RADIO_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoDeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[58]"></a>PWR_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[54]"></a>PWR_ExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitSleepMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[56]"></a>PWR_ExitStopMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = PWR_ExitStopMode &rArr; SX1276MB1MAS_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(.text.RTC_ByteToBcd2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_ByteToBcd2 &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime)
</UL>
<P><STRONG><a name="[a3]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[5a]"></a>RTC_IF_BkUp_Read_Seconds</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Read_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Read_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[5c]"></a>RTC_IF_BkUp_Read_SubSeconds</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Read_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Read_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[59]"></a>RTC_IF_BkUp_Write_Seconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Write_Seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Write_Seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[5b]"></a>RTC_IF_BkUp_Write_SubSeconds</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_BkUp_Write_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IF_BkUp_Write_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[67]"></a>RTC_IF_Convert_Tick2ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_Convert_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_IF_Convert_Tick2ms &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[66]"></a>RTC_IF_Convert_ms2Tick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_Convert_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[8e]"></a>RTC_IF_DelayMs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtc_if.o(.text.RTC_IF_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerValue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[65]"></a>RTC_IF_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc_if.o(.text.RTC_IF_GetMinimumTimeout))
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[5d]"></a>RTC_IF_GetTime</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_IF_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IF_GetTime &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[62]"></a>RTC_IF_GetTimerContext</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc_if.o(.text.RTC_IF_GetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[63]"></a>RTC_IF_GetTimerElapsedTime</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_IF_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IF_GetTimerElapsedTime &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[64]"></a>RTC_IF_GetTimerValue</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_IF_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_DelayMs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[5e]"></a>RTC_IF_Init</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, rtc_if.o(.text.RTC_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RTC_IF_Init &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_SetTimerContext
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[61]"></a>RTC_IF_SetTimerContext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_IF_SetTimerContext &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[5f]"></a>RTC_IF_StartTimer</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, rtc_if.o(.text.RTC_IF_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RTC_IF_StartTimer &rArr; HAL_RTC_SetAlarm_IT &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_GetMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StopTimer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerElapsedTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[60]"></a>RTC_IF_StopTimer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc_if.o(.text.RTC_IF_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_IF_StopTimer &rArr; HAL_RTC_DeactivateAlarm &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>SEQ_BitPosition</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32_seq.o(.text.SEQ_BitPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[46]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, sx1276.o(.text.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276GetTimeOnAir &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[52]"></a>SX1276GetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276GetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_GetWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[3d]"></a>SX1276Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SetXO
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoIrqInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_GetWakeUpTime
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[41]"></a>SX1276IsChannelFree</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e8]"></a>SX1276MB1MAS_RADIO_Bus_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_Bus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276MB1MAS_RADIO_Bus_Init &rArr; BSP_SPI1_Init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[45]"></a>SX1276MB1MAS_RADIO_CheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e9]"></a>SX1276MB1MAS_RADIO_ChipSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_ChipSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276MB1MAS_RADIO_ChipSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[ea]"></a>SX1276MB1MAS_RADIO_GetDio1PinState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_GetDio1PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276MB1MAS_RADIO_GetDio1PinState
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[f4]"></a>SX1276MB1MAS_RADIO_GetPaSelect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[e0]"></a>SX1276MB1MAS_RADIO_GetWakeUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_GetWakeUpTime))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetWakeupTime
</UL>

<P><STRONG><a name="[d2]"></a>SX1276MB1MAS_RADIO_IoDeInit</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SX1276MB1MAS_RADIO_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
</UL>

<P><STRONG><a name="[d4]"></a>SX1276MB1MAS_RADIO_IoInit</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SX1276MB1MAS_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[e4]"></a>SX1276MB1MAS_RADIO_IoIrqInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276MB1MAS_RADIO_IoIrqInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_RegisterCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[e2]"></a>SX1276MB1MAS_RADIO_Reset</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276MB1MAS_RADIO_Reset &rArr; HAL_Delay &rArr; RTC_IF_DelayMs &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[ee]"></a>SX1276MB1MAS_RADIO_SendRecv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[ef]"></a>SX1276MB1MAS_RADIO_SetAntSw</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276MB1MAS_RADIO_SetAntSw
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[e1]"></a>SX1276MB1MAS_RADIO_SetXO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1mas.o(.text.SX1276MB1MAS_RADIO_SetXO))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[42]"></a>SX1276Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[2b]"></a>SX1276Read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 6]<UL><LI> sx1276.o(.text.SX1276SetRxConfig)
<LI> sx1276.o(.text.SX1276SetTxConfig)
<LI> sx1276.o(.text.SX1276Send)
<LI> sx1276.o(.text.SX1276SetRx)
<LI> sx1276.o(.text.RxChainCalibration)
<LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4f]"></a>SX1276ReadBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276ReadBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SendRecv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_ChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4d]"></a>SX1276ReadRssi</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[47]"></a>SX1276Send</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SX1276Send &rArr; SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[40]"></a>SX1276SetChannel</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SX1276SetChannel &rArr; SX1276ConvertFreqInHzToPllStep &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertFreqInHzToPllStep
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[50]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[3f]"></a>SX1276SetModem</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[51]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4a]"></a>SX1276SetRx</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[43]"></a>SX1276SetRxConfig</STRONG> (Thumb, 676 bytes, Stack size 64 bytes, sx1276.o(.text.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[48]"></a>SX1276SetSleep</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SetXO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[49]"></a>SX1276SetStby</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[44]"></a>SX1276SetTxConfig</STRONG> (Thumb, 740 bytes, Stack size 64 bytes, sx1276.o(.text.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_GetPaSelect
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertFreqInHzToPllStep
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4c]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, sx1276.o(.text.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4b]"></a>SX1276StartCad</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[2f]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 5]<UL><LI> sx1276.o(.text.SX1276SetRxConfig)
<LI> sx1276.o(.text.SX1276SetRx)
<LI> sx1276.o(.text.SX1276SetTxContinuousWave)
<LI> sx1276.o(.text.SX1276SetModem)
<LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4e]"></a>SX1276WriteBuffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SendRecv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_ChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ca]"></a>SubghzApp_Init</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, subghz_phy_app.o(.text.SubghzApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SubghzApp_Init &rArr; UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>SysTimeAdd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>

<P><STRONG><a name="[f7]"></a>SysTimeGet</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, stm32_systime.o(.text.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTimeGet &rArr; SysTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[c9]"></a>SystemApp_Init</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, sys_app.o(.text.SystemApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SystemApp_Init &rArr; SX1276MB1MAS_RADIO_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_IoInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_RegisterTimeStampFunction
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Bus_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ProbesInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Init
</UL>

<P><STRONG><a name="[100]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, system_stm32l0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>TimerExists</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_timer.o(.text.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
</UL>

<P><STRONG><a name="[106]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_timer.o(.text.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[115]"></a>TimerInsertTimer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_timer.o(.text.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[107]"></a>TimerSetTimeout</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32_timer.o(.text.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[bc]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>UART_CheckIdleState</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bb]"></a>UART_SetConfig</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c2]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[b0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UTIL_ADV_TRACE_COND_FSend</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Lock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPong_Process
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxError
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[fb]"></a>UTIL_ADV_TRACE_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[105]"></a>UTIL_ADV_TRACE_PostSendHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PostSendHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_PostSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
</UL>

<P><STRONG><a name="[104]"></a>UTIL_ADV_TRACE_PreSendHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PreSendHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_PreSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[fc]"></a>UTIL_ADV_TRACE_RegisterTimeStampFunction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_RegisterTimeStampFunction))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[fd]"></a>UTIL_ADV_TRACE_SetVerboseLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_SetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[110]"></a>UTIL_LPM_EnterLowPower</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32_lpm.o(.text.UTIL_LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
</UL>

<P><STRONG><a name="[dc]"></a>UTIL_LPM_GetMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
</UL>

<P><STRONG><a name="[fe]"></a>UTIL_LPM_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[ff]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[db]"></a>UTIL_LPM_SetStopMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_StartTimer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
</UL>

<P><STRONG><a name="[f2]"></a>UTIL_MEM_cpy_8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_mem.o(.text.UTIL_MEM_cpy_8))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[10e]"></a>UTIL_MEM_set_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_mem.o(.text.UTIL_MEM_set_8))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>

<P><STRONG><a name="[10f]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_app.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[113]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[112]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[f5]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_RegTask &rArr; SEQ_BitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
</UL>

<P><STRONG><a name="[cc]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
</UL>

<P><STRONG><a name="[cf]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxError
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
</UL>

<P><STRONG><a name="[2d]"></a>UTIL_TIMER_Create</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text.SX1276Init)
</UL>
<P><STRONG><a name="[e6]"></a>UTIL_TIMER_GetCurrentTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_GetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[e7]"></a>UTIL_TIMER_GetElapsedTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_timer.o(.text.UTIL_TIMER_GetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[9d]"></a>UTIL_TIMER_IRQ_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[f9]"></a>UTIL_TIMER_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[f3]"></a>UTIL_TIMER_SetPeriod</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[d0]"></a>UTIL_TIMER_Start</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnledEvent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubghzApp_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[30]"></a>UTIL_TIMER_Stop</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32_timer.o(.text.UTIL_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPong_Process
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text.SX1276SetStby)
</UL>
<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SubGHz_Phy_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10c]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 672 bytes, Stack size 152 bytes, stm32_tiny_vsnprintf.o(.text.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
</UL>

<P><STRONG><a name="[69]"></a>vcom_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vcom_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[68]"></a>vcom_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = vcom_Init &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[6a]"></a>vcom_ReceiveInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart_if.o(.text.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[6b]"></a>vcom_Trace_DMA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Trace_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vcom_Trace_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[126]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[127]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[128]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[33]"></a>OnRxDone</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, subghz_phy_app.o(.text.OnRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = OnRxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[35]"></a>OnRxError</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, subghz_phy_app.o(.text.OnRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OnRxError &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[36]"></a>OnRxTimeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, subghz_phy_app.o(.text.OnRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OnRxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[34]"></a>OnTxDone</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, subghz_phy_app.o(.text.OnTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OnTxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[37]"></a>OnTxTimeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, subghz_phy_app.o(.text.OnTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OnTxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[32]"></a>OnledEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, subghz_phy_app.o(.text.OnledEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OnledEvent &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[38]"></a>PingPong_Process</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, subghz_phy_app.o(.text.PingPong_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = PingPong_Process &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> subghz_phy_app.o(.text.SubghzApp_Init)
</UL>
<P><STRONG><a name="[d5]"></a>RTC_GetCalendarValue</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, rtc_if.o(.text.RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_SetTimerContext
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerValue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTimerElapsedTime
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_GetTime
</UL>

<P><STRONG><a name="[39]"></a>TimestampNow</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sys_app.o(.text.TimestampNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TimestampNow &rArr; tiny_snprintf_like &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_app.o(.text.SystemApp_Init)
</UL>
<P><STRONG><a name="[108]"></a>tiny_snprintf_like</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_app.o(.text.tiny_snprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tiny_snprintf_like &rArr; tiny_vsnprintf_like &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[97]"></a>__NVIC_SetPriority</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[8c]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ae]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[ad]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[27]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[28]"></a>UART_DMAError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[2a]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[29]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[b6]"></a>UART_EndRxTransfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[3a]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[3b]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[e5]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(.text.GetFskBandwidthRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFskBandwidthRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[dd]"></a>RxChainCalibration</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sx1276.o(.text.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RxChainCalibration &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[de]"></a>SX1276ConvertFreqInHzToPllStep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276ConvertFreqInHzToPllStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SX1276ConvertFreqInHzToPllStep &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>

<P><STRONG><a name="[6c]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[6d]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276OnDio1Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_GetDio1PinState
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[6e]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276OnDio2Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[6f]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[70]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[2c]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_Reset
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text.SX1276Init)
</UL>
<P><STRONG><a name="[f0]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[e3]"></a>SX1276SetOpMode</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sx1276.o(.text.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SetXO
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276MB1MAS_RADIO_SetAntSw
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[f1]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SX1276MB1MAS_RADIO_SendRecv &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; RTC_IF_GetTimerValue &rArr; RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[10d]"></a>TRACE_AllocateBufer</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, stm32_adv_trace.o(.text.TRACE_AllocateBufer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TRACE_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[102]"></a>TRACE_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.TRACE_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[101]"></a>TRACE_Send</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRACE_Send &rArr; UTIL_ADV_TRACE_PreSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[3c]"></a>TRACE_TxCpltCallback</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRACE_TxCpltCallback &rArr; UTIL_ADV_TRACE_PostSendHook
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
</UL>
<P><STRONG><a name="[103]"></a>TRACE_UnLock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.TRACE_UnLock))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
